title	emoji	project_url	metaDescription	date	summary	tags	description													
Bartiq		https://github.com/PsiQ/bartiq	Bartiq is a library that allows one to analyze quantum algorithms and manipulate symbolic expressions for quantum resource estimates (QRE).	4/10/2025	Bartiq is a library that allows one to analyze quantum algorithms and manipulate symbolic expressions for quantum resource estimates (QRE).	Python, QRE	Bartiq is a library that allows one to analyze quantum algorithms and manipulate symbolic expressions for quantum resource estimates (QRE).													mstechly
QIR-EE	ü§ùüõ†	https://github.com/ORNL-QCI/qiree	The QIR Execution Engine provides interfaces for processing Quantum Intermediate Representation code using the LLVM execution engine.	4/10/2025	The QIR Execution Engine provides interfaces for processing Quantum Intermediate Representation code using the LLVM execution engine.	compiler, quantum intermediate representation, LLVM, hybrid computing	Hybrid languages like the Quantum Intermediate Representation (QIR) are essential for programming systems that mix quantum and conventional computing models, while execution of these programs is often deferred to a system-specific implementation. Here, we develop QIR-EE, an execution engine for QIR, for parsing, interpreting, and executing QIR across multiple hardware platforms. QIR-EE uses LLVM to execute hybrid instructions specifying quantum programs and, by design, presents extension points that support customized runtime and hardware environments. This project highlights the efficiency of hybrid executable architectures for handling mixed instructions, managing mixed data, and integrating with quantum computing frameworks to realize cross-platform execution.													@sethrj, @wongey
QUAlibration Graph	üìà‚ÄãüöÄ‚Äã	https://github.com/qua-platform/qualibration-libs	QUAlibrationGraph is an advanced, Python-based, open-source calibration platform designed to streamline the calibration process for quantum computers.	4/10/2025	QUAlibrationGraph is an advanced, Python-based, open-source calibration platform designed to streamline the calibration process for quantum computers.	Python, QUA, hardware control, calibration graph	QUAlibrationGraph is an advanced, Python-based, open-source calibration platform designed to streamline the calibration process for quantum computers. Specifically built for quantum processing units (QPUs) with OPX controllers, it provides tools that empower users‚Äîfrom researchers to engineers‚Äîto efficiently tune up their quantum systems with precision and flexibility and¬†scale easily from single-qubit calibrations to complex, multi-qubit workflows. It is based on QUAlibrate which is a comprehensive platform that enables users to create, manage, and execute calibration routines for quantum computers.													
metriq-app	üìä‚öõÔ∏è	https://github.com/unitaryfoundation/metriq-app	Metriq is a community-driven platform for hosting quantum benchmarks.	4/10/2025	Metriq is a community-driven platform for hosting quantum benchmarks.	benchmarking, quantum-computation	There has been rapid progress in quantum computing, but it can be hard to track that progress. Researchers want to know how to compare against the state of the art and users want to know what tools best suit them.  Metriq is a free and open source platform that helps anyone better answer this question for themselves. Researchers and developers in academia and industry can submit results on existing benchmarks or propose new benchmarking tasks to the community. Results include sources and are openly accessible. It is free to sign up and submit.  Metriq accelerates research by upgrading the taxonomy of reported results that are often now locked away in tables of review papers. By making the data explorable and live-updated we‚Äôll be able to make better progress together to develop quantum technology.													@vprusso, @cosenal, @WrathfulSpatula
QuantumToolbox.jl	‚öõÔ∏è	https://github.com/qutip/QuantumToolbox.jl	A pure Julia framework designed for High-performance quantum physics simulations	4/10/2025	A pure Julia framework designed for High-performance quantum physics simulations	julia, quantum, quantum-optics, open-quantum-systems	QuantumToolbox.jl¬†is a cutting-edge¬†Julia¬†package designed for quantum physics simulations, closely emulating the popular¬†Python QuTiP¬†package. It uniquely combines the simplicity and power of Julia with advanced features like GPU acceleration and distributed computing, making simulation of quantum systems more accessible and efficient. Taking advantage of the¬†Julia¬†language features (like multiple dispatch and metaprogramming),¬†QuantumToolbox.jl¬†is designed to be easily extendable, allowing users to build upon the existing functionalities. With this package, moving from Python to Julia for quantum physics simulations has never been easier, due to the similar syntax and functionalities.													
Qiskit	üåê	https://github.com/Qiskit/qiskit/	Qiskit is an open-source SDK for working with quantum computers at the level of extended quantum circuits, operators, and primitives	4/10/2025	Qiskit is an open-source SDK for working with quantum computers at the level of extended quantum circuits, operators, and primitives	sdk, rust, python, circuit optimization, compilation, OpenQASM	[Qiskit](https://www.ibm.com/quantum/qiskit) is a popular SDK to build, transpile, execute, and visualize quantum circuits, as well as It contains the building blocks for creating and working with quantum operators, and primitive functions (Sampler and Estimator). The transpiler supports optimizing quantum circuits. It also has quantum information toolbox for creating advanced operators.  If it is the first time contributing to `qiskit`, please take a look at our [contribution guidelines](https://github.com/Qiskit/qiskit/blob/main/CONTRIBUTING.md).  > For support from the community, please join the [Qiskit Slack community](https://qisk.it/join-slack). The channels #qiskit-dev and #qiskit-pr-help are a good place for questions on the development and the PRing process respectively.													https://github.com/Qiskit/, https://github.com/1ucian0
UCC	üç±ü•û	https://github.com/unitaryfoundation/ucc	The Unitary Compiler Collection is an open-source, frontend-agnostic toolkit for compiling quantum circuits.	4/10/2025	The Unitary Compiler Collection is an open-source, frontend-agnostic toolkit for compiling quantum circuits.	Python, compilation,	The Unitary Compiler Collection (UCC) is a Python library for frontend-agnostic, high performance compilation of quantum circuits. UCC's goal is to gather together the best of open source compilation to make quantum programming simpler, faster, and more scalable.													@jordandsullivan, @Misty-W, @bachase
MQT Core	‚öõÔ∏è	https://github.com/munich-quantum-toolkit/core	The Backbone of the Munich Quantum Toolkit (MQT) -- A collection of design automation tools and software for quantum computing	4/10/2025	The Backbone of the Munich Quantum Toolkit (MQT) -- A collection of design automation tools and software for quantum computing	C++, Python, classical simulation, compilation, MLIR, decision diagrams, ZX-calculus, neutral atom quantum computing, quantum software stack	Quantum computers are becoming a reality and numerous quantum computing applications with a near-term perspective (e.g., for finance, chemistry, machine learning, and optimization) and with a long-term perspective (e.g., for cryptography or unstructured search) are currently being investigated. However, designing and realizing potential applications for these devices in a scalable fashion requires automated, efficient, and user-friendly software tools that cater to the needs of end users, engineers, and physicists at every level of the entire quantum software stack. Many of the problems to be tackled in that regard are similar to design problems from the classical realm for which sophisticated design automation tools have been developed in the previous decades. The Munich Quantum Toolkit (MQT) is a collection of software tools for quantum computing that explicitly utilizes this design automation expertise. It is developed by the Chair for Design Automation at the Technical University of Munich as well as the Munich Quantum Software Company (MQSC). Among others, it is part of the Munich Quantum Software Stack (MQSS) ecosystem, which is being developed as part of the Munich Quantum Valley (MQV) initiative. Our overarching objective is to provide solutions for design tasks across the entire quantum software stack. This entails high-level support for end users in realizing their applications, efficient methods for the classical simulation, compilation, and verification of quantum circuits, tools for quantum error correction, support for physical design, and more. These methods are supported by corresponding data structures (such as decision diagrams or the ZX-calculus) and core methods (such as SAT encodings/solvers). All of the developed tools are available as open-source implementations and are hosted on github.com/munich-quantum-toolkit. MQT Core is an open-source C++17 and Python library for quantum computing that forms the backbone of the quantum software tools developed as part of the MQT. To this end, it consists of multiple components that are used throughout the MQT, including a fully fledged intermediate representation (IR) for quantum computations (including support for neutral atom quantum computing), a state-of-the-art decision diagram (DD) package for quantum computing, and a dedicated ZX-diagram package for working with the ZX-calculus. Additionally, it features a full OpenQASM 3 parser and exporter as well as direct translation to/from Qiskit.  													@burgholzer, @ystade, @DRovara, @flowerthrower
Qiskit AI Transpiler	üåêü§ó	https://github.com/Qiskit/qiskit-ibm-transpiler	Qiskit IBM Transpiler is a package to run AI & heuristic Qiskit transpiler passes on local and cloud environments.	4/10/2025	Qiskit IBM Transpiler is a package to run AI & heuristic Qiskit transpiler passes on local and cloud environments.	Python, machine learning, AI, cloud, IBM	Qiskit IBM Transpiler is a library that allows users to run AI-powered and heuristic Qiskit transpiler passes locally or in cloud environments. Through combining existing heuristic approaches and AI-powered transpilation passes along with hybrid passmanagers, the project aims to improve existing transpilation tools and frameworks.  Contributor guidelines													https://github.com/cbjuan, https://github.com/1ucian0, https://github.com/Qiskit